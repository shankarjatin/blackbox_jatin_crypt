<%- include("./partials/header.ejs"); %>

  <!-- Below component to blur background while leaderboard is open -->
  <div id="background-blur-outer"></div>
  <!-- Below script is for displaying any message if present -->
  <% if (message !="None" ) { %>
    <script defer>
      alert("<%- message %>");
    </script>
    <% } %>

      <!-- Below script is for redirecting if any redirect if present -->
      <% if (redirect !=false ) { %>
        <script defer>
          window.location.replace("<%- redirectUrl %>");
        </script>
        <% } %>
          <div id="level-head">
            <h1 id="">Level #<%- level %>!</h1>
          </div>

          <div id="gamediv">
            <div id="outercountdown">
              <div class="countdown-timer countdown">00:00:00</div>

              <div id="line" class="window-clock"></div>
              <div id="line2" class="window-clock2"></div>
              <div class="piechart" id="yesme">
                <div class="dot"></div>
              </div>
            </div>

            <div class="blackbox-user-interface">
              <!-- <div class="blackbox-input-part"> -->
              <div class="input-part-inner">
                <h1>Enter Values</h1>
                <div class="flex-center">

                  <div class="inputs-list">
                    <% for(let i=1; i<=variableCount ; i++){ %>
                      <label class="input-label" for="num<%- i %>">Number <%- i %> :</label>
                      <input type="number" name="num<%- i %>" class="numbers input-input" id="num<%- i %>" />
                      <% } %>
                  </div>
                </div>
              </div>
              <div class="instruction-part">
                <p></p>
                <div class="instruction-head">Instructions</div>
                <% if(instructions.length===0){ %>
                  <div class="instruction-li">use a,b,c,d and e as variables!</div>
                  <% }else{ %>
                    <% for(let i=0; i<instructions.length;i++){ %>
                      <li class="instruction-li"><%- instructions[i]%></li>
                      <%}%>
                        <%}%>
              </div>


              <!-- </div> -->

              <!-- <div class="blackbox-input-part"> -->

              <div class="history-list-container" id="list-container">
                <% if (team.Array.length> 0) { %>
                  <ul class="history-list blackboxHistory">
                    <% for(let i=(team.Array.length)-1 ; i>=0 ; i--){ %>
                      <li class="history-list-item">
                        <%= team.Array[i] %>
                      </li>
                      <% } %>
                  </ul>
                  <% } else{%>

                    <p class="no_combinations_tried">No combinations tried yet!</p>
                    <%}%>
              </div>
              <div class="submit-answer-part">
                <label for="submit_expression">Enter your expression here!</label>
                <input type="text" placeholder="Enter your expression" name="user_expression" id="submit_expression"
                  onkeypress="return /[0-9a-e+\-*/<>^%()&|!~]/i.test(event.key);" />
              </div>

              <!-- </div> -->
              <!-- <div class="submit-section"> -->
              <button class="blackbox-btn check-btn-1" onclick="checkExpression()">
                Check Combination
              </button>
              <button class="blackbox-btn check-btn-2" onclick="submit()">Submit Expression</button>


            </div>

            <% if (remaining_time !="None" ) { %>
              <script defer>
                let timer = document.getElementsByClassName("countdown");
                for (let i = 0; i <= timer.length - 1; i++) {
                  let time = Math.floor(Number("<%-remaining_time%>") / 1000);
                  setInterval(updatecountdown, 1000);
                  function updatecountdown() {
                    let hours = Math.floor(time / 3600);
                    let minutes = Math.floor((time % 3600) / 60);
                    let seconds = Math.floor(time - 3600 * hours - 60 * minutes);
                    if (time < 0) {
                      timer[i].innerHTML = `00 : 00 : 00`;
                      window.location = "/submit";
                    } else {
                      timer[i].innerHTML = `${hours} : ${minutes} : ${seconds}`;
                    }
                    time--;
                    let degs = 450 - time * 3.6 / 108;
                    // console.log(degs);
                    document.getElementById("yesme").style.transform =
                      "rotate(" + (degs - 45) + "deg)";
                    document.getElementById("line").style.backgroundImage =
                      "linear-gradient(" +
                      degs +
                      "deg, transparent 50%, white 50%),linear-gradient(90deg, white 50%, transparent 50%)";
                    document.getElementById("line2").style.backgroundImage =
                      "linear-gradient(" +
                      (degs - 180) +
                      "deg, transparent 50%, #EE3FA2 50%),linear-gradient(90deg, white 50%, transparent 50%)";
                    if (time < 5400) {
                      document.getElementById("line").style.visibility = "hidden";
                      document.getElementById("line2").style.visibility = "visible";
                      document.getElementById("line").style.backgroundImage =
                        "linear-gradient(0deg, transparent 50%, white 50%),linear-gradient(90deg, white 50%, transparent 50%)";
                    }
                  }
                }
              </script>
              <% } else { %>
                <% } %>
                  <script defer>
                    function createUL(Array) {
                      div = document.getElementById("hint_id");
                      div.innerHTML = "";
                      const ul = document.createElement("ul");
                      ul.classList.add("hint-list-ul")
                      if (Array.length == 0) {
                        const li = document.createElement("div");
                        li.style.textAlign = "center";
                        const text = document.createTextNode("No Hints to Show");
                        li.appendChild(text);
                        ul.appendChild(li);
                      } else {
                        for (let i = 0; i < Array.length; i++) {
                          const li = document.createElement("li");
                          li.classList.add("hints-item-li")
                          const text = document.createTextNode(Array[i].hint);
                          li.appendChild(text);
                          ul.appendChild(li);
                        }
                      }
                      div.appendChild(ul);
                    }
                    function hintClick() {
                      document.getElementById("hint_id").style.display = "block";
                      payload = { game: "Blackbox", level: "<%- level %>" };
                      axios.post("/get_hints", payload).then((res) => {
                        createUL(res.data.result);
                      });
                    }
                  </script>
                  <script defer>
                    async function submit() {
                      url = "/submit_blackbox";
                      const expression = document.getElementById("submit_expression").value;
                      payload = { user_expression: `${expression}` };
                      const res = await axios.post(url, payload);
                      if (res.data.success == false && res.data.redirect == false) {
                        alert(res.data.message);
                        document.getElementById("submit_expression").value = "";
                      } else if (res.data.success == true && res.data.redirect == false) {
                        alert(res.data.message);
                        window.location.reload();
                      } else if (res.data.success == true && res.data.redirect == true) {
                        alert(res.data.message);
                        // console.log(res.data.url);
                        window.location.replace(res.data.url);
                      }
                      else {
                        alert(res.data);
                      }
                    }
                  </script>
                  <script defer>
                    document
                      .getElementById("background-blur-outer")
                      .addEventListener("click", () => {
                        leaderClick(1);
                      });
                    //clearing input fields
                    function clear() {
                      var allInputs = document.getElementsByClassName("numbers");
                      for (let i = 0; i < allInputs.length; i++) {
                        allInputs[i].value = "";
                      }
                    }
                    //rendering list item
                    function renderList(array) {
                      const listContainer = document.getElementById("list-container");
                      const ul = document.createElement("ul"); // Adding classlist so that the css apply to the updated hints

                      ul.classList.add("history-list");
                      ul.classList.add("blackboxHistory");
                      for (let i = array.length - 1; i >= 0; i--) {
                        const li = document.createElement("li");
                        li.textContent = array[i];
                        li.classList.add("history-list-item");
                        ul.appendChild(li);
                        clear();
                      }
                      //clearing listContainer before appending
                      listContainer.innerHTML = "";
                      listContainer.appendChild(ul);
                    }
                    //update new items
                    function updateList(newArray) {
                      renderList(newArray);
                    }

                    async function checkExpression() {
                      url = "<% process.env.DEPLOYMENT %>";
                      url = "/black_ques";
                      const inputFields = document.getElementsByClassName("numbers");
                      payload = {};
                      for (let i = 0; i < inputFields.length; i++) {
                        payload[inputFields[i].name] = inputFields[i].value;
                      }
                      await axios.post(url, payload).then((res) => {
                        if (res.data.success == true && res.data.redirect == false) {
                          const data = res.data.attempts;
                          updateList(data);
                        } else if (res.data.success == false && res.data.redirect == false) {
                          alert(res.data.message);
                          clear();
                        }
                        else if (res.data.success == true && res.data.redirect == true) {
                          alert(res.data.message);
                          window.location.replace(res.data.url);
                        } else {
                          alert(res.data)
                        }
                      });
                    }
                  </script>
                  <script defer>
                    // input validation for submit expression
                    const inputField = document.getElementById("submit_expression");

                    inputField.addEventListener("paste", (event) => {
                      // Get the pasted data as plain text
                      const pastedData = event.clipboardData.getData("text/plain");

                      // Remove all characters that are not a through e, +, -, *, or /
                      const filteredData = pastedData.replace(/[^0-9a-e+\-*/<>%^()&|!~]/gi, "");

                      // Set the input field value to the filtered data
                      inputField.value = filteredData;

                      // Prevent the default paste action
                      event.preventDefault();
                    });
                  </script>

                  <%- include("./partials/footer.ejs"); %>
          </div>